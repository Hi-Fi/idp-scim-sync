---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: |
  This template is to keep your AWS Single Sign-On (SSO) groups and users in sync with your
  Google Workspace directory using and AWS Lambda function

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Lambda - Configuration"
        Parameters:
          - SyncMethod
          - DisableState
          - GWSUsersFilter
          - GWSGroupsFilter
          - LogLevel
          - LogFormat
          - ScheduleExpression
          - MemorySize
          - Timeout
          - LogGroupRetentionDays
      - Label:
          default: "State - Configuration"
        Parameters:
          - BucketNamePrefix
          - BucketKey
      - Label:
          default: "Google Workspace - Credentials"
        Parameters:
          - GWSServiceAccountFile
          - GWSServiceAccountFileSecretName
          - GWSUserEmail
          - GWSUserEmailSecretName
      - Label:
          default: "AWS Single Sign-On SCIM - Credentials"
        Parameters:
          - SCIMEndpoint
          - SCIMEndpointSecretName
          - SCIMAccessToken
          - SCIMAccessTokenSecretName

  AWS::ServerlessRepo::Application:
    Name: idp-scim-sync
    Description: |
      keep your AWS Single Sign-On (SSO) groups and users in sync with your
      Google Workspace directory using and AWS Lambda function.
    Author: SlashDevOps idp-scim-sync Team
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels:
      ["Serverless", "SSO", "Lambda", "SCIM", "AWS", "Go", "Google-Workspace", "sso-scim-sync", "Groups", "Users"]
    HomePageUrl: https://github.com/slashdevops/idp-scim-sync
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/slashdevops/idp-scim-sync

Parameters:
  ScheduleExpression:
    Type: String
    Description: |
      Schedule for trigger the execution of ssosync (see EventBridge rule schedule expressions)
      Reference: https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html
    Default: rate(15 minutes)

  LogLevel:
    Type: String
    Description: Log level for Lambda function logging
    Default: warn
    AllowedValues:
      - panic
      - fatal
      - error
      - warn
      - info
      - debug
      - trace

  LogFormat:
    Type: String
    Description: Log format for Lambda function logging
    Default: json
    AllowedValues:
      - json
      - text

  BucketNamePrefix:
    Type: String
    Description: |
      The name of the bucket where the state data will be stored.
      NOTE: This template will use the AWS Region and AWS Account ID as a suffix to the bucket name to avoid conflicts.
      'BucketNamePrefix-AWS::AccountId-AWS::Region'
    Default: idp-scim-sync-state

  BucketKey:
    Type: String
    Description: |
      The key of the bucket where the state data will be stored
    Default: data/state.json

  GWSServiceAccountFile:
    Type: String
    Description: |
      The Google Workspace credentials file content (content of credentials.json)
    NoEcho: true

  GWSServiceAccountFileSecretName:
    Type: String
    Description: |
      The Google Workspace credentials file secret name
    Default: IDPSCIM_GWSServiceAccountFile

  GWSUserEmail:
    Type: String
    Description: |
      The Google Workspace user email
    NoEcho: true

  GWSUserEmailSecretName:
    Type: String
    Description: |
      The Google Workspace user email secret name
    Default: IDPSCIM_GWSUserEmail

  SCIMEndpoint:
    Type: String
    Description: |
      The AWS SSO SCIM Endpoint Url
      Reference: https://docs.aws.amazon.com/singlesignon/latest/userguide/provision-automatically.html
    NoEcho: true

  SCIMEndpointSecretName:
    Type: String
    Description: |
      The AWS SSO SCIM Endpoint Url secret name
    Default: IDPSCIM_SCIMEndpoint

  SCIMAccessToken:
    Type: String
    Description: |
      The AWS SSO SCIM AccessToken
      Reference: https://docs.aws.amazon.com/singlesignon/latest/userguide/provision-automatically.html
    NoEcho: true

  SCIMAccessTokenSecretName:
    Type: String
    Description: |
      The AWS SSO SCIM AccessToken secret name
    Default: IDPSCIM_SCIMAccessToken

  GWSUsersFilter:
    Type: String
    Description: |
      The Google Workspace user filter query parameter, example: 'name:John* email:admin*', see: https://developers.google.com/admin-sdk/directory/v1/guides/search-users
    Default: ""

  GWSGroupsFilter:
    Type: String
    Description: |
      The Google Workspace group filter query parameter, example: 'name:AWS* email:aws-*', see: https://developers.google.com/admin-sdk/directory/v1/guides/search-groups
    Default: ""

  SyncMethod:
    Type: String
    Description: |
      The sync method to use
    Default: groups
    AllowedValues:
      - groups

  DisableState:
    Type: String
    Description: |
      Disable the state file?
    Default: false
    AllowedValues:
      - true
      - false

  MemorySize:
    Type: Number
    Description: |
      The amount of memory to allocate to the Lambda function.
      The value must be a multiple of 64 MB.
    Default: 512
    MaxValue: 10240
    MinValue: 128

  Timeout:
    Type: Number
    Description: |
      The amount of time that Lambda allows a function to run before terminating it.
      The value must be greater than or equal to 60 seconds.
    Default: 300
    MaxValue: 900
    MinValue: 3

  LogGroupRetentionDays:
    Type: Number
    Description: The number of days you want to keep logs for created function
    Default: 1
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

Resources:
  LambdaFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaFunctionLogGroup
    Properties:
      FunctionName: idp-scim-sync
      Runtime: go1.x
      MemorySize: !Ref MemorySize
      Handler: dist/idpscim-linux-amd64
      Timeout: !Ref Timeout
      Tracing: Active
      Environment:
        Variables:
          IDPSCIM_LOG_LEVEL: !Ref LogLevel
          IDPSCIM_LOG_FORMAT: !Ref LogFormat
          IDPSCIM_SYNC_METHOD: !Ref SyncMethod
          IDPSCIM_DISABLE_STATE: !Ref DisableState
          IDPSCIM_AWS_S3_BUCKET_NAME: !Sub "${BucketNamePrefix}-${AWS::AccountId}-${AWS::Region}"
          IDPSCIM_AWS_S3_BUCKET_KEY: !Ref BucketKey
          IDPSCIM_GWS_GROUPS_FILTER: !Ref GWSGroupsFilter
          IDPSCIM_GWS_USERS_FILTER: !Ref GWSUsersFilter
          IDPSCIM_GWS_USER_EMAIL_SECRET_ARN: !Ref AWSGWSUserEmailSecret
          IDPSCIM_GWS_SERVICE_ACCOUNT_FILE_SECRET_ARN: !Ref AWSGWSServiceAccountFileSecret
          IDPSCIM_SCIM_ENDPOINT_SECRET_ARN: !Ref AWSSCIMEndpointSecret
          IDPSCIM_SCIM_ACCESS_TOKEN_SECRET_ARN: !Ref AWSSCIMAccessTokenSecret
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        SyncScheduledEvent:
          Type: Schedule
          Name: AWSSyncSchedule
          Properties:
            Enabled: true
            Schedule: !Ref ScheduleExpression

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub "This role is used by the Lambda function ${AWS::StackName}"
      RoleName: !Sub "serverless-idp-scim-sync-${AWS::AccountId}-${AWS::Region}"
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: "lambda.amazonaws.com"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: CustomLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Sid: SSMGetParameterPolicy
                  Effect: Allow
                  Action:
                    - secretsmanager:Get*
                  Resource:
                    - !Ref AWSGWSServiceAccountFileSecret
                    - !Ref AWSGWSUserEmailSecret
                    - !Ref AWSSCIMEndpointSecret
                    - !Ref AWSSCIMAccessTokenSecret
                - Sid: S3Policy
                  Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:GetObjectVersion
                    - s3:PutObject
                  Resource:
                    - !Sub "arn:aws:s3:::${BucketNamePrefix}-${AWS::AccountId}-${AWS::Region}/*"
                - Sid: KMSDecryptPolicy
                  Effect: Allow
                  Action:
                    - kms:Decrypt
                    - kms:GenerateDataKey*
                  Resource:
                    - !GetAtt KMSKey.Arn

  AWSGWSServiceAccountFileSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref GWSServiceAccountFileSecretName
      SecretString: !Ref GWSServiceAccountFile

  AWSGWSUserEmailSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref GWSUserEmailSecretName
      SecretString: !Ref GWSUserEmail

  AWSSCIMEndpointSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref SCIMEndpointSecretName
      SecretString: !Ref SCIMEndpoint

  AWSSCIMAccessTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref SCIMAccessTokenSecretName
      SecretString: !Ref SCIMAccessToken

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: ipd-scim-sync state bucket kms key.
      KeyPolicy:
        Version: 2012-10-17
        Id: ipd-scim-sync-state-bucket-key-policy
        Statement:
          - Sid: AllowIAMThisAccount
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: AllowAWSLambdaToRetrieveKMSKey
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${BucketNamePrefix}-${AWS::AccountId}-${AWS::Region}"
      TargetKeyId:
        Ref: KMSKey

  Bucket:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${KMSKeyAlias}"
              SSEAlgorithm: "aws:kms"

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAWSLambdaFunction
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:role/serverless-idp-scim-sync-${AWS::AccountId}-${AWS::Region}"
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${Bucket}/*"
          - Sid: DenyPublishingUnencryptedResources
            Effect: Deny
            Principal: "*"
            Action:
              - s3:PutObject
            Resource: !Sub "arn:${AWS::Partition}:s3:::${Bucket}/*"
            Condition:
              "Null":
                "s3:x-amz-server-side-encryption": true
          - Sid: DenyUnEncryptedObjectUploads
            Principal: "*"
            Action: s3:PutObject
            Effect: Deny
            Resource: !Sub "arn:${AWS::Partition}:s3:::${Bucket}/*"
            Condition:
              "StringNotEquals":
                "s3:x-amz-server-side-encryption": "aws:kms"
          - Sid: AllowSSLRequestsOnly
            Principal: "*"
            Action:
              - s3:*
            Effect: Deny
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${Bucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${Bucket}/*"
            Condition:
              Bool:
                "aws:SecureTransport": false

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/aws/lambda/idp-scim-sync"
      RetentionInDays: !Ref LogGroupRetentionDays

Outputs:
  LambdaFunctionArn:
    Value: !GetAtt LambdaFunction.Arn
    Description: >
      The ARN of the Lambda function
    Export:
      Name: LambdaFunctionArn

  LambdaFunctionName:
    Value: !Ref LambdaFunction
    Description: >
      The name of the Lambda function
    Export:
      Name: LambdaFunctionName
