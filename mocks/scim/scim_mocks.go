// Code generated by MockGen. DO NOT EDIT.
// Source: scim.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	aws "github.com/slashdevops/idp-scim-sync/pkg/aws"
)

// MockAWSSCIMProvider is a mock of AWSSCIMProvider interface.
type MockAWSSCIMProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAWSSCIMProviderMockRecorder
}

// MockAWSSCIMProviderMockRecorder is the mock recorder for MockAWSSCIMProvider.
type MockAWSSCIMProviderMockRecorder struct {
	mock *MockAWSSCIMProvider
}

// NewMockAWSSCIMProvider creates a new mock instance.
func NewMockAWSSCIMProvider(ctrl *gomock.Controller) *MockAWSSCIMProvider {
	mock := &MockAWSSCIMProvider{ctrl: ctrl}
	mock.recorder = &MockAWSSCIMProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSSCIMProvider) EXPECT() *MockAWSSCIMProviderMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockAWSSCIMProvider) CreateGroup(ctx context.Context, g *aws.CreateGroupRequest) (*aws.CreateGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, g)
	ret0, _ := ret[0].(*aws.CreateGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockAWSSCIMProviderMockRecorder) CreateGroup(ctx, g interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockAWSSCIMProvider)(nil).CreateGroup), ctx, g)
}

// CreateUser mocks base method.
func (m *MockAWSSCIMProvider) CreateUser(ctx context.Context, u *aws.CreateUserRequest) (*aws.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(*aws.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAWSSCIMProviderMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAWSSCIMProvider)(nil).CreateUser), ctx, u)
}

// ListGroups mocks base method.
func (m *MockAWSSCIMProvider) ListGroups(ctx context.Context, filter string) (*aws.ListsGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", ctx, filter)
	ret0, _ := ret[0].(*aws.ListsGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockAWSSCIMProviderMockRecorder) ListGroups(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockAWSSCIMProvider)(nil).ListGroups), ctx, filter)
}

// ListUsers mocks base method.
func (m *MockAWSSCIMProvider) ListUsers(ctx context.Context, filter string) (*aws.UsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, filter)
	ret0, _ := ret[0].(*aws.UsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockAWSSCIMProviderMockRecorder) ListUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockAWSSCIMProvider)(nil).ListUsers), ctx, filter)
}
