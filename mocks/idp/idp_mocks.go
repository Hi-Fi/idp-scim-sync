// Code generated by MockGen. DO NOT EDIT.
// Source: idp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "google.golang.org/api/admin/directory/v1"
)

// MockGoogleProviderService is a mock of GoogleProviderService interface.
type MockGoogleProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleProviderServiceMockRecorder
}

// MockGoogleProviderServiceMockRecorder is the mock recorder for MockGoogleProviderService.
type MockGoogleProviderServiceMockRecorder struct {
	mock *MockGoogleProviderService
}

// NewMockGoogleProviderService creates a new mock instance.
func NewMockGoogleProviderService(ctrl *gomock.Controller) *MockGoogleProviderService {
	mock := &MockGoogleProviderService{ctrl: ctrl}
	mock.recorder = &MockGoogleProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleProviderService) EXPECT() *MockGoogleProviderServiceMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockGoogleProviderService) GetUser(ctx context.Context, userID string) (*admin.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(*admin.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockGoogleProviderServiceMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockGoogleProviderService)(nil).GetUser), ctx, userID)
}

// ListGroupMembers mocks base method.
func (m *MockGoogleProviderService) ListGroupMembers(ctx context.Context, groupID string) ([]*admin.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupMembers", ctx, groupID)
	ret0, _ := ret[0].([]*admin.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroupMembers indicates an expected call of ListGroupMembers.
func (mr *MockGoogleProviderServiceMockRecorder) ListGroupMembers(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMembers", reflect.TypeOf((*MockGoogleProviderService)(nil).ListGroupMembers), ctx, groupID)
}

// ListGroups mocks base method.
func (m *MockGoogleProviderService) ListGroups(ctx context.Context, query []string) ([]*admin.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", ctx, query)
	ret0, _ := ret[0].([]*admin.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockGoogleProviderServiceMockRecorder) ListGroups(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockGoogleProviderService)(nil).ListGroups), ctx, query)
}

// ListUsers mocks base method.
func (m *MockGoogleProviderService) ListUsers(ctx context.Context, query []string) ([]*admin.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, query)
	ret0, _ := ret[0].([]*admin.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockGoogleProviderServiceMockRecorder) ListUsers(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockGoogleProviderService)(nil).ListUsers), ctx, query)
}
