AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: >
  idp-scim-sync lambda function is used to sync Google Workspace Groups and their Memebers to AWS Single Sing-On service using AWS SSO SCIM API.

  References:
    - https://docs.aws.amazon.com/singlesignon/latest/developerguide/what-is-scim.html
    - https://github.com/slashdevops/idp-scim-sync

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Credentials - AWS and Google Workspace"
        Parameters:
          - GoogleCredentials
          - GoogleAdminEmail
          - SCIMEndpointUrl
          - SCIMEndpointAccessToken
      - Label:
          default: "Advanced Configuration"
        Parameters:
          - SyncMethod
          - GoogleUserMatch
          - GoogleGroupMatch
          - LogLevel
          - LogFormat
          - ScheduleExpression
          - IgnoreUsers
          - IgnoreGroups
          - IncludeGroups

  AWS::ServerlessRepo::Application:
    Name: idp-scim-sync
    Description: Sync your AWS Single Sing-On (SSO) with Google Workspace.
    Author: Christian GonzÃ¡lez Di Antonio
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels:
      ["serverless", "sso", "lambda", "scim", "google", "aws", "go", "golang"]
    HomePageUrl: https://github.com/slashdevops/idp-scim-sync
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/slashdevops/idp-scim-sync/tree/0.0.1

Parameters:
  ScheduleExpression:
    Type: String
    Description: Schedule for trigger the execution of ssosync (see CloudWatch schedule expressions)
    Default: rate(15 minutes)

  LogLevel:
    Type: String
    Description: Log level for Lambda function logging
    Default: warn
    AllowedValues:
      - panic
      - fatal
      - error
      - warn
      - info
      - debug
      - trace

  LogFormat:
    Type: String
    Description: Log format for Lambda function logging
    Default: json
    AllowedValues:
      - json
      - text

  BucketNamePrefix:
    Type: String
    Description: >
      The name of the bucket where the state data will be stored.
      NOTE: This template will use the AWS Region and AWS Account ID as a suffix to the bucket name to avoid conflicts.
      'BucketNamePrefix-AWS::Region-AWS::AccountId'
    Default: idp-scim-sync-state

  BucketKey:
    Type: String
    Description: >
      The key of the bucket where the state data will be stored
    Default: data/state.json

  GWSServiceAccountFile:
    Type: String
    Description: >
      The Google Workspace credentials file content (content of credentials.json)
    NoEcho: true

  GWSServiceAccountFileSecretName:
    Type: String
    Description: >
      The Google Workspace credentials file secret name
    Default: IDPSCIM_GWSServiceAccountFile

  GWSUserEmail:
    Type: String
    Description: >
      The Google Workspace user email
    NoEcho: true

  GWSUserEmailSecretName:
    Type: String
    Description: >
      The Google Workspace user email secret name
    Default: IDPSCIM_GWSUserEmail

  SCIMEndpoint:
    Type: String
    Description: >
      The AWS SSO SCIM Endpoint Url
      Reference: https://docs.aws.amazon.com/singlesignon/latest/userguide/provision-automatically.html
    NoEcho: true

  SCIMEndpointSecretName:
    Type: String
    Description: >
      The AWS SSO SCIM Endpoint Url secret name
    Default: IDPSCIM_SCIMEndpoint

  SCIMAccessToken:
    Type: String
    Description: >
      The AWS SSO SCIM AccessToken
      Reference: https://docs.aws.amazon.com/singlesignon/latest/userguide/provision-automatically.html
    NoEcho: true

  SCIMAccessTokenSecretName:
    Type: String
    Description: >
      The AWS SSO SCIM AccessToken secret name
    Default: IDPSCIM_SCIMAccessToken

  GWSUsersFilter:
    Type: String
    Description: >
      The Google Workspace user filter query parameter, example: 'name:John* email:admin*', see: https://developers.google.com/admin-sdk/directory/v1/guides/search-users

  GWSGroupsFilter:
    Type: String
    Description: >
      The Google Workspace group filter query parameter, example: 'name:Admin* email:aws-*', see: https://developers.google.com/admin-sdk/directory/v1/guides/search-groups

  SyncMethod:
    Type: String
    Description: >
      The sync method to use
    Default: groups
    AllowedValues:
      - groups

  MemorySize:
    Type: Number
    Description: >
      The amount of memory to allocate to the Lambda function.
      The value must be a multiple of 64 MB.
    Default: 512
    MaxValue: 10240
    MinValue: 128

  Timeout:
    Type: Number
    Description: >
      The amount of time that Lambda allows a function to run before terminating it.
      The value must be greater than or equal to 60 seconds.
    Default: 300
    MaxValue: 900
    MinValue: 3

Resources:
  IDPSCIMSyncLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: idp-scim-sync
      Runtime: go1.x
      MemorySize: !Ref MemorySize
      Handler: dist/idpscim-linux-amd64
      Timeout: !Ref Timeout
      Tracing: Active
      Environment:
        Variables:
          IDPSCIM_LOG_LEVEL: !Ref LogLevel
          IDPSCIM_LOG_FORMAT: !Ref LogFormat
          IDPSCIM_SYNC_METHOD: !Ref SyncMethod
          IDPSCIM_AWS_S3_BUCKET_NAME: !Sub "${BucketNamePrefix}-${AWS::Region}-${AWS::AccountId}"
          IDPSCIM_AWS_S3_BUCKET_KEY: !Ref BucketKey
          IDPSCIM_GWS_USER_EMAIL: !Ref GWSUserEmail
          IDPSCIM_GWS_USER_EMAIL_SECRET_NAME: !Ref GWSUserEmailSecretName
          IDPSCIM_GWS_SERVICE_ACCOUNT_FILE: !Ref GWSServiceAccountFile
          IDPSCIM_GWS_SERVICE_ACCOUNT_FILE_SECRET_NAME: !Ref GWSServiceAccountFileSecretName
          IDPSCIM_GWS_GROUPS_FILTER: !Ref GWSGroupsFilter
          IDPSCIM_GWS_USERS_FILTER: !Ref GWSUsersFilter
          IDPSCIM_SCIM_ENDPOINT: !Ref SCIMEndpoint
          IDPSCIM_SCIM_ENDPOINT_SECRET_NAME: !Ref SCIMEndpointSecretName
          IDPSCIM_SCIM_ACCESS_TOKEN: !Ref SCIMAccessToken
          IDPSCIM_SCIM_ACCESS_TOKEN_SECRET_NAME: !Ref SCIMAccessTokenSecretName
      Policies:
        - Statement:
            - Sid: SSMGetParameterPolicy
              Effect: Allow
              Action:
                - secretsmanager:Get*
              Resource:
                - !Ref AWSGWSServiceAccountFileSecret
                - !Ref AWSGWSUserEmailSecret
                - !Ref AWSSCIMEndpointSecret
                - !Ref AWSSCIMAccessTokenSecret
            - Sid: S3Policy
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                - !Sub "arn:aws:s3:::${BucketNamePrefix}-${AWS::Region}-${AWS::AccountId}/*"
      Events:
        SyncScheduledEvent:
          Type: Schedule
          Name: AWSSyncSchedule
          Properties:
            Enabled: true
            Schedule: !Ref ScheduleExpression

  AWSGWSServiceAccountFileSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Ref GWSServiceAccountFileSecretName
      SecretString: !Ref GWSServiceAccountFile

  AWSGWSUserEmailSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Ref GWSUserEmailSecretName
      SecretString: !Ref GWSUserEmail

  AWSSCIMEndpointSecret: # This can be moved to custom provider
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Ref SCIMEndpointSecretName
      SecretString: !Ref SCIMEndpoint

  AWSSCIMAccessTokenSecret: # This can be moved to custom provider
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Ref SCIMAccessTokenSecretName
      SecretString: !Ref SCIMAccessToken

  BucketKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: ipd-scim-sync state bucket kms key.
      KeyPolicy:
        Version: 2012-10-17
        Id: ipd-scim-sync-state-bucket-key-policy
        Statement:
          - Sid: AllowIAMThisAccount
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: AllowAWSLambdaToRetrieveKMSKey
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"

  BucketKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/s3-scim-sync-state-bucket
      TargetKeyId:
        Ref: BucketKMSKey

  Bucket:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketNamePrefix}-${AWS::Region}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${BucketKMSKeyAlias}"
              SSEAlgorithm: "aws:kms"

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSLambdaBucketDelivery
            Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Principal:
              Service:
                - lambda.amazonaws.com
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${Bucket}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringLike:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: DenyPublishingUnencryptedResources
            Effect: Deny
            Action: s3:PutObject
            Condition:
              "Null":
                "s3:x-amz-server-side-encryption": true
            Principal: "*"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${Bucket}/*"
          - Sid: DenyUnencryptedObjectUploads
            Action: s3:PutObject
            Effect: Deny
            Condition:
              "StringNotEquals":
                "s3:x-amz-server-side-encryption": "aws:kms"
            Principal: "*"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${Bucket}/*"
          - Sid: AllowSSLRequestsOnly
            Action:
              - s3:*
            Effect: Deny
            Condition:
              Bool:
                "aws:SecureTransport": false
            Principal: "*"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${Bucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${Bucket}/*"

Outputs:
  LambdaFunctionArn:
    Value: !GetAtt IDPSCIMSyncLambdaFunction.Arn
    Description: >
      The ARN of the Lambda function
    Export:
      Name: IDPSCIMSyncLambdaFunctionArn

  LambdaFunctionName:
    Value: !Ref IDPSCIMSyncLambdaFunction
    Description: >
      The name of the Lambda function
    Export:
      Name: IDPSCIMSyncLambdaFunctionName
