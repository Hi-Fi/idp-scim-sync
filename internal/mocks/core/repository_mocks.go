// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/slashdevops/idp-scim-sync/internal/model"
)

// MockSyncRepository is a mock of SyncRepository interface.
type MockSyncRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSyncRepositoryMockRecorder
}

// MockSyncRepositoryMockRecorder is the mock recorder for MockSyncRepository.
type MockSyncRepositoryMockRecorder struct {
	mock *MockSyncRepository
}

// NewMockSyncRepository creates a new mock instance.
func NewMockSyncRepository(ctrl *gomock.Controller) *MockSyncRepository {
	mock := &MockSyncRepository{ctrl: ctrl}
	mock.recorder = &MockSyncRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncRepository) EXPECT() *MockSyncRepositoryMockRecorder {
	return m.recorder
}

// GetGroups mocks base method.
func (m *MockSyncRepository) GetGroups() (*model.GroupsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups")
	ret0, _ := ret[0].(*model.GroupsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockSyncRepositoryMockRecorder) GetGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockSyncRepository)(nil).GetGroups))
}

// GetGroupsUsers mocks base method.
func (m *MockSyncRepository) GetGroupsUsers() (*model.GroupsUsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsUsers")
	ret0, _ := ret[0].(*model.GroupsUsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsUsers indicates an expected call of GetGroupsUsers.
func (mr *MockSyncRepositoryMockRecorder) GetGroupsUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsUsers", reflect.TypeOf((*MockSyncRepository)(nil).GetGroupsUsers))
}

// GetState mocks base method.
func (m *MockSyncRepository) GetState() (model.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(model.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockSyncRepositoryMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockSyncRepository)(nil).GetState))
}

// GetUsers mocks base method.
func (m *MockSyncRepository) GetUsers() (*model.UsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(*model.UsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockSyncRepositoryMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockSyncRepository)(nil).GetUsers))
}

// StoreGroups mocks base method.
func (m *MockSyncRepository) StoreGroups(gr *model.GroupsResult) (model.StoreGroupsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreGroups", gr)
	ret0, _ := ret[0].(model.StoreGroupsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreGroups indicates an expected call of StoreGroups.
func (mr *MockSyncRepositoryMockRecorder) StoreGroups(gr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreGroups", reflect.TypeOf((*MockSyncRepository)(nil).StoreGroups), gr)
}

// StoreGroupsUsers mocks base method.
func (m *MockSyncRepository) StoreGroupsUsers(gr *model.GroupsUsersResult) (model.StoreGroupsUsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreGroupsUsers", gr)
	ret0, _ := ret[0].(model.StoreGroupsUsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreGroupsUsers indicates an expected call of StoreGroupsUsers.
func (mr *MockSyncRepositoryMockRecorder) StoreGroupsUsers(gr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreGroupsUsers", reflect.TypeOf((*MockSyncRepository)(nil).StoreGroupsUsers), gr)
}

// StoreState mocks base method.
func (m *MockSyncRepository) StoreState(sgr *model.StoreGroupsResult, sur *model.StoreUsersResult, sgur *model.StoreGroupsUsersResult) (model.StoreStateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreState", sgr, sur, sgur)
	ret0, _ := ret[0].(model.StoreStateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreState indicates an expected call of StoreState.
func (mr *MockSyncRepositoryMockRecorder) StoreState(sgr, sur, sgur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreState", reflect.TypeOf((*MockSyncRepository)(nil).StoreState), sgr, sur, sgur)
}

// StoreUsers mocks base method.
func (m *MockSyncRepository) StoreUsers(ur *model.UsersResult) (model.StoreUsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUsers", ur)
	ret0, _ := ret[0].(model.StoreUsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreUsers indicates an expected call of StoreUsers.
func (mr *MockSyncRepositoryMockRecorder) StoreUsers(ur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUsers", reflect.TypeOf((*MockSyncRepository)(nil).StoreUsers), ur)
}
