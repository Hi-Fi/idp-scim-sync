// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/slashdevops/idp-scim-sync/internal/model"
)

// MockStateRepository is a mock of StateRepository interface.
type MockStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStateRepositoryMockRecorder
}

// MockStateRepositoryMockRecorder is the mock recorder for MockStateRepository.
type MockStateRepositoryMockRecorder struct {
	mock *MockStateRepository
}

// NewMockStateRepository creates a new mock instance.
func NewMockStateRepository(ctrl *gomock.Controller) *MockStateRepository {
	mock := &MockStateRepository{ctrl: ctrl}
	mock.recorder = &MockStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateRepository) EXPECT() *MockStateRepositoryMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockStateRepository) GetState() (*model.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(*model.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockStateRepositoryMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateRepository)(nil).GetState))
}

// UpdateState mocks base method.
func (m *MockStateRepository) UpdateState(state *model.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockStateRepositoryMockRecorder) UpdateState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockStateRepository)(nil).UpdateState), state)
}
