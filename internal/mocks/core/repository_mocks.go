// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/slashdevops/idp-scim-sync/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetGroups mocks base method.
func (m *MockRepository) GetGroups() (*model.GroupsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups")
	ret0, _ := ret[0].(*model.GroupsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockRepositoryMockRecorder) GetGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockRepository)(nil).GetGroups))
}

// GetGroupsUsers mocks base method.
func (m *MockRepository) GetGroupsUsers() (*model.GroupsUsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsUsers")
	ret0, _ := ret[0].(*model.GroupsUsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsUsers indicates an expected call of GetGroupsUsers.
func (mr *MockRepositoryMockRecorder) GetGroupsUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsUsers", reflect.TypeOf((*MockRepository)(nil).GetGroupsUsers))
}

// GetState mocks base method.
func (m *MockRepository) GetState() (*model.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(*model.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockRepositoryMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockRepository)(nil).GetState))
}

// GetUsers mocks base method.
func (m *MockRepository) GetUsers() (*model.UsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(*model.UsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepositoryMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepository)(nil).GetUsers))
}

// UpdateState mocks base method.
func (m *MockRepository) UpdateState(state *model.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockRepositoryMockRecorder) UpdateState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockRepository)(nil).UpdateState), state)
}
