// Code generated by MockGen. DO NOT EDIT.
// Source: internal/provider/provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/slashdevops/idp-scim-sync/internal/model"
)

// MockIdentityProviderService is a mock of IdentityProviderService interface.
type MockIdentityProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityProviderServiceMockRecorder
}

// MockIdentityProviderServiceMockRecorder is the mock recorder for MockIdentityProviderService.
type MockIdentityProviderServiceMockRecorder struct {
	mock *MockIdentityProviderService
}

// NewMockIdentityProviderService creates a new mock instance.
func NewMockIdentityProviderService(ctrl *gomock.Controller) *MockIdentityProviderService {
	mock := &MockIdentityProviderService{ctrl: ctrl}
	mock.recorder = &MockIdentityProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityProviderService) EXPECT() *MockIdentityProviderServiceMockRecorder {
	return m.recorder
}

// GetGroupMembers mocks base method.
func (m *MockIdentityProviderService) GetGroupMembers(ctx context.Context, groupID string) (*model.MembersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", ctx, groupID)
	ret0, _ := ret[0].(*model.MembersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers.
func (mr *MockIdentityProviderServiceMockRecorder) GetGroupMembers(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockIdentityProviderService)(nil).GetGroupMembers), ctx, groupID)
}

// GetGroups mocks base method.
func (m *MockIdentityProviderService) GetGroups(ctx context.Context, filter []string) (*model.GroupsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, filter)
	ret0, _ := ret[0].(*model.GroupsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockIdentityProviderServiceMockRecorder) GetGroups(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockIdentityProviderService)(nil).GetGroups), ctx, filter)
}

// GetUsers mocks base method.
func (m *MockIdentityProviderService) GetUsers(ctx context.Context, filter []string) (*model.UsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, filter)
	ret0, _ := ret[0].(*model.UsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIdentityProviderServiceMockRecorder) GetUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIdentityProviderService)(nil).GetUsers), ctx, filter)
}

// GetUsersFromGroupMembers mocks base method.
func (m *MockIdentityProviderService) GetUsersFromGroupMembers(ctx context.Context, members *model.MembersResult) (*model.UsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersFromGroupMembers", ctx, members)
	ret0, _ := ret[0].(*model.UsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersFromGroupMembers indicates an expected call of GetUsersFromGroupMembers.
func (mr *MockIdentityProviderServiceMockRecorder) GetUsersFromGroupMembers(ctx, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersFromGroupMembers", reflect.TypeOf((*MockIdentityProviderService)(nil).GetUsersFromGroupMembers), ctx, members)
}
