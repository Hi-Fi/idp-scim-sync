// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sync/service.go

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIdentityProviderService is a mock of IdentityProviderService interface.
type MockIdentityProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityProviderServiceMockRecorder
}

// MockIdentityProviderServiceMockRecorder is the mock recorder for MockIdentityProviderService.
type MockIdentityProviderServiceMockRecorder struct {
	mock *MockIdentityProviderService
}

// NewMockIdentityProviderService creates a new mock instance.
func NewMockIdentityProviderService(ctrl *gomock.Controller) *MockIdentityProviderService {
	mock := &MockIdentityProviderService{ctrl: ctrl}
	mock.recorder = &MockIdentityProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityProviderService) EXPECT() *MockIdentityProviderServiceMockRecorder {
	return m.recorder
}

// GetGroupMembers mocks base method.
func (m *MockIdentityProviderService) GetGroupMembers(ctx context.Context, groupID string) (*MembersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", ctx, groupID)
	ret0, _ := ret[0].(*MembersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers.
func (mr *MockIdentityProviderServiceMockRecorder) GetGroupMembers(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockIdentityProviderService)(nil).GetGroupMembers), ctx, groupID)
}

// GetGroups mocks base method.
func (m *MockIdentityProviderService) GetGroups(ctx context.Context, filter []string) (*GroupsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, filter)
	ret0, _ := ret[0].(*GroupsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockIdentityProviderServiceMockRecorder) GetGroups(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockIdentityProviderService)(nil).GetGroups), ctx, filter)
}

// GetUsers mocks base method.
func (m *MockIdentityProviderService) GetUsers(ctx context.Context, filter []string) (*UsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, filter)
	ret0, _ := ret[0].(*UsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIdentityProviderServiceMockRecorder) GetUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIdentityProviderService)(nil).GetUsers), ctx, filter)
}

// GetUsersFromGroupMembers mocks base method.
func (m *MockIdentityProviderService) GetUsersFromGroupMembers(ctx context.Context, members *MembersResult) (*UsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersFromGroupMembers", ctx, members)
	ret0, _ := ret[0].(*UsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersFromGroupMembers indicates an expected call of GetUsersFromGroupMembers.
func (mr *MockIdentityProviderServiceMockRecorder) GetUsersFromGroupMembers(ctx, members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersFromGroupMembers", reflect.TypeOf((*MockIdentityProviderService)(nil).GetUsersFromGroupMembers), ctx, members)
}

// MockSCIMService is a mock of SCIMService interface.
type MockSCIMService struct {
	ctrl     *gomock.Controller
	recorder *MockSCIMServiceMockRecorder
}

// MockSCIMServiceMockRecorder is the mock recorder for MockSCIMService.
type MockSCIMServiceMockRecorder struct {
	mock *MockSCIMService
}

// NewMockSCIMService creates a new mock instance.
func NewMockSCIMService(ctrl *gomock.Controller) *MockSCIMService {
	mock := &MockSCIMService{ctrl: ctrl}
	mock.recorder = &MockSCIMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSCIMService) EXPECT() *MockSCIMServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdateGroups mocks base method.
func (m *MockSCIMService) CreateOrUpdateGroups(ctx context.Context, gr *GroupsResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateGroups", ctx, gr)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateGroups indicates an expected call of CreateOrUpdateGroups.
func (mr *MockSCIMServiceMockRecorder) CreateOrUpdateGroups(ctx, gr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateGroups", reflect.TypeOf((*MockSCIMService)(nil).CreateOrUpdateGroups), ctx, gr)
}

// CreateOrUpdateUsers mocks base method.
func (m *MockSCIMService) CreateOrUpdateUsers(ctx context.Context, ur *UsersResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateUsers", ctx, ur)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateUsers indicates an expected call of CreateOrUpdateUsers.
func (mr *MockSCIMServiceMockRecorder) CreateOrUpdateUsers(ctx, ur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateUsers", reflect.TypeOf((*MockSCIMService)(nil).CreateOrUpdateUsers), ctx, ur)
}

// DeleteGroups mocks base method.
func (m *MockSCIMService) DeleteGroups(ctx context.Context, gr *GroupsResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroups", ctx, gr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroups indicates an expected call of DeleteGroups.
func (mr *MockSCIMServiceMockRecorder) DeleteGroups(ctx, gr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroups", reflect.TypeOf((*MockSCIMService)(nil).DeleteGroups), ctx, gr)
}

// DeleteUsers mocks base method.
func (m *MockSCIMService) DeleteUsers(ctx context.Context, ur *UsersResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", ctx, ur)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockSCIMServiceMockRecorder) DeleteUsers(ctx, ur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockSCIMService)(nil).DeleteUsers), ctx, ur)
}

// GetGroups mocks base method.
func (m *MockSCIMService) GetGroups(ctx context.Context, filter []string) (*GroupsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, filter)
	ret0, _ := ret[0].(*GroupsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockSCIMServiceMockRecorder) GetGroups(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockSCIMService)(nil).GetGroups), ctx, filter)
}

// GetUsers mocks base method.
func (m *MockSCIMService) GetUsers(ctx context.Context, filter []string) (*UsersResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, filter)
	ret0, _ := ret[0].(*UsersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockSCIMServiceMockRecorder) GetUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockSCIMService)(nil).GetUsers), ctx, filter)
}

// MockSyncService is a mock of SyncService interface.
type MockSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockSyncServiceMockRecorder
}

// MockSyncServiceMockRecorder is the mock recorder for MockSyncService.
type MockSyncServiceMockRecorder struct {
	mock *MockSyncService
}

// NewMockSyncService creates a new mock instance.
func NewMockSyncService(ctrl *gomock.Controller) *MockSyncService {
	mock := &MockSyncService{ctrl: ctrl}
	mock.recorder = &MockSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncService) EXPECT() *MockSyncServiceMockRecorder {
	return m.recorder
}

// SyncGroupsAndTheirMembers mocks base method.
func (m *MockSyncService) SyncGroupsAndTheirMembers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncGroupsAndTheirMembers")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncGroupsAndTheirMembers indicates an expected call of SyncGroupsAndTheirMembers.
func (mr *MockSyncServiceMockRecorder) SyncGroupsAndTheirMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncGroupsAndTheirMembers", reflect.TypeOf((*MockSyncService)(nil).SyncGroupsAndTheirMembers))
}

// SyncGroupsAndUsers mocks base method.
func (m *MockSyncService) SyncGroupsAndUsers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncGroupsAndUsers")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncGroupsAndUsers indicates an expected call of SyncGroupsAndUsers.
func (mr *MockSyncServiceMockRecorder) SyncGroupsAndUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncGroupsAndUsers", reflect.TypeOf((*MockSyncService)(nil).SyncGroupsAndUsers))
}
