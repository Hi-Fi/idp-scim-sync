// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sync/service.go

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProviderService is a mock of ProviderService interface.
type MockProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockProviderServiceMockRecorder
}

// MockProviderServiceMockRecorder is the mock recorder for MockProviderService.
type MockProviderServiceMockRecorder struct {
	mock *MockProviderService
}

// NewMockProviderService creates a new mock instance.
func NewMockProviderService(ctrl *gomock.Controller) *MockProviderService {
	mock := &MockProviderService{ctrl: ctrl}
	mock.recorder = &MockProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderService) EXPECT() *MockProviderServiceMockRecorder {
	return m.recorder
}

// GetGroups mocks base method.
func (m *MockProviderService) GetGroups(arg0 *context.Context, arg1 []string) (*GroupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0, arg1)
	ret0, _ := ret[0].(*GroupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockProviderServiceMockRecorder) GetGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockProviderService)(nil).GetGroups), arg0, arg1)
}

// GetGroupsMembers mocks base method.
func (m *MockProviderService) GetGroupsMembers(arg0 *context.Context, arg1 *GroupResult) (*MemberResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsMembers", arg0, arg1)
	ret0, _ := ret[0].(*MemberResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsMembers indicates an expected call of GetGroupsMembers.
func (mr *MockProviderServiceMockRecorder) GetGroupsMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsMembers", reflect.TypeOf((*MockProviderService)(nil).GetGroupsMembers), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockProviderService) GetUsers(arg0 *context.Context, arg1 []string) (*UserResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*UserResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockProviderServiceMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockProviderService)(nil).GetUsers), arg0, arg1)
}

// GetUsersFromGroupsMembers mocks base method.
func (m *MockProviderService) GetUsersFromGroupsMembers(arg0 *context.Context, arg1 []string, arg2 *MemberResult) (*UserResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersFromGroupsMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].(*UserResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersFromGroupsMembers indicates an expected call of GetUsersFromGroupsMembers.
func (mr *MockProviderServiceMockRecorder) GetUsersFromGroupsMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersFromGroupsMembers", reflect.TypeOf((*MockProviderService)(nil).GetUsersFromGroupsMembers), arg0, arg1, arg2)
}

// MockSCIMService is a mock of SCIMService interface.
type MockSCIMService struct {
	ctrl     *gomock.Controller
	recorder *MockSCIMServiceMockRecorder
}

// MockSCIMServiceMockRecorder is the mock recorder for MockSCIMService.
type MockSCIMServiceMockRecorder struct {
	mock *MockSCIMService
}

// NewMockSCIMService creates a new mock instance.
func NewMockSCIMService(ctrl *gomock.Controller) *MockSCIMService {
	mock := &MockSCIMService{ctrl: ctrl}
	mock.recorder = &MockSCIMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSCIMService) EXPECT() *MockSCIMServiceMockRecorder {
	return m.recorder
}

// CreateOrUpdateGroups mocks base method.
func (m *MockSCIMService) CreateOrUpdateGroups(arg0 *context.Context, arg1 *GroupResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateGroups", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateGroups indicates an expected call of CreateOrUpdateGroups.
func (mr *MockSCIMServiceMockRecorder) CreateOrUpdateGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateGroups", reflect.TypeOf((*MockSCIMService)(nil).CreateOrUpdateGroups), arg0, arg1)
}

// CreateOrUpdateUsers mocks base method.
func (m *MockSCIMService) CreateOrUpdateUsers(arg0 *context.Context, arg1 *UserResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateUsers indicates an expected call of CreateOrUpdateUsers.
func (mr *MockSCIMServiceMockRecorder) CreateOrUpdateUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateUsers", reflect.TypeOf((*MockSCIMService)(nil).CreateOrUpdateUsers), arg0, arg1)
}

// DeleteGroups mocks base method.
func (m *MockSCIMService) DeleteGroups(arg0 *context.Context, arg1 *GroupResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroups", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroups indicates an expected call of DeleteGroups.
func (mr *MockSCIMServiceMockRecorder) DeleteGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroups", reflect.TypeOf((*MockSCIMService)(nil).DeleteGroups), arg0, arg1)
}

// DeleteUsers mocks base method.
func (m *MockSCIMService) DeleteUsers(arg0 *context.Context, arg1 *UserResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockSCIMServiceMockRecorder) DeleteUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockSCIMService)(nil).DeleteUsers), arg0, arg1)
}

// GetGroups mocks base method.
func (m *MockSCIMService) GetGroups(arg0 *context.Context, arg1 []string) (*GroupResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0, arg1)
	ret0, _ := ret[0].(*GroupResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockSCIMServiceMockRecorder) GetGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockSCIMService)(nil).GetGroups), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockSCIMService) GetUsers(arg0 *context.Context, arg1 []string) (*UserResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*UserResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockSCIMServiceMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockSCIMService)(nil).GetUsers), arg0, arg1)
}

// MockSyncService is a mock of SyncService interface.
type MockSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockSyncServiceMockRecorder
}

// MockSyncServiceMockRecorder is the mock recorder for MockSyncService.
type MockSyncServiceMockRecorder struct {
	mock *MockSyncService
}

// NewMockSyncService creates a new mock instance.
func NewMockSyncService(ctrl *gomock.Controller) *MockSyncService {
	mock := &MockSyncService{ctrl: ctrl}
	mock.recorder = &MockSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncService) EXPECT() *MockSyncServiceMockRecorder {
	return m.recorder
}

// SyncGroupsAndTheirMembers mocks base method.
func (m *MockSyncService) SyncGroupsAndTheirMembers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncGroupsAndTheirMembers")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncGroupsAndTheirMembers indicates an expected call of SyncGroupsAndTheirMembers.
func (mr *MockSyncServiceMockRecorder) SyncGroupsAndTheirMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncGroupsAndTheirMembers", reflect.TypeOf((*MockSyncService)(nil).SyncGroupsAndTheirMembers))
}

// SyncGroupsAndUsers mocks base method.
func (m *MockSyncService) SyncGroupsAndUsers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncGroupsAndUsers")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncGroupsAndUsers indicates an expected call of SyncGroupsAndUsers.
func (mr *MockSyncServiceMockRecorder) SyncGroupsAndUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncGroupsAndUsers", reflect.TypeOf((*MockSyncService)(nil).SyncGroupsAndUsers))
}
